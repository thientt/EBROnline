@model EBROnline.ViewModel.DashboardViewModel
@{
    ViewBag.Title = "EditRequest";
    AjaxOptions ajaxOption = new AjaxOptions
    {
        HttpMethod = "POST",
        OnBegin = "onBegin",
        OnComplete = "onComplete",
        OnSuccess = "onSuccess",
        OnFailure = "onFailure",
    };

    List<SelectListItem> dropdownYESNO = new List<SelectListItem>();
    dropdownYESNO.Add(new SelectListItem { Text = "--- Select --- ", Value = "null", Selected = true });
    dropdownYESNO.Add(new SelectListItem { Text = "YES", Value = "true" });
    dropdownYESNO.Add(new SelectListItem { Text = "NO", Value = "false", });

    List<SelectListItem> dropdownYESNOComment = new List<SelectListItem>();
    dropdownYESNOComment.Add(new SelectListItem { Text = "--- Select --- ", Value = "null", Selected = true });
    dropdownYESNOComment.Add(new SelectListItem { Text = "YES", Value = "true" });
    dropdownYESNOComment.Add(new SelectListItem { Text = "NO, much provide instructions", Value = "false", });

    var statusType = !Model.IsAllowEdit;
}

<link href="~/Content/main.css" rel="stylesheet" />
<link href="~/Content/app/comment.css" rel="stylesheet" />
<style>
    table > thead > tr > th {
        text-align: center;
    }

    #btnSaveDraft, #btnSaveReject {
        margin-right: 5px;
    }
</style>

<h2>Edit EBR Request</h2>

@using (Ajax.BeginForm(ajaxOption))
{
    @Html.HiddenFor(x => x.Id)

    <div class="row">
        <div class="col-sm-6">
            <div class="form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.Device, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.Device, new { @class = "form-control bg-blue", @id = "txtDevice" }, statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="(CSO Example) AT36302-DSxH-08-T <br/> (SJO Example) 36302 or 36302-1 <br/> (RFO-NTO Example)  36302/PID16"></span>
                        @Html.ValidationMessageFor(model => model.Device)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Rev, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.Rev, new { @class = "form-control bg-blue", @id = "txtRev" }, true)
                        @Html.HiddenFor(model => model.Rev)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>(Example) SL903Rev00</strong>"></span>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FABDieRevision, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.FABDieRevision, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtFABDieRevision" }, disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>(Example) A, B, C, etc</strong>"></span>
                        @Html.ValidationMessageFor(model => model.FABDieRevision)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PMPN, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.PMPN, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtPMPN" }, disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>(Example) 36302A11P or 36302AXXP</strong>"></span>
                        @Html.ValidationMessageFor(model => model.PMPN)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AMPN, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.AMPN, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtAMPN" }, disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>(Example) 36302A11-SWBH11A or 36302AXX-SWBXXXA</strong>"></span>
                        @Html.ValidationMessageFor(model => model.AMPN)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TMPN, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.TMPN, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtTMPN" }, disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>(Example) 36302A11-SWBH11T or 36302AXX-SWBXXXT</strong>"></span>
                        @Html.ValidationMessageFor(model => model.TMPN)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FMPN, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.FMPN, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtFMPN" }, disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>(Example) 36302A11-SWBH11F </br>If building a Proto Part <br />(Example) 36302AXX-SWBXXXF<br />do not enter anything in this field</strong>"></span>
                        @Html.ValidationMessageFor(model => model.FMPN)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CPN_SAP_Material, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.CPN_SAP_Material, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtCPN_SAP_Material" }, disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>(This is the Material in SAP,<br />also known as the CPN<br />(Example) 24C02D-SSHM-T</strong>"></span>
                        @Html.ValidationMessageFor(model => model.CPN_SAP_Material)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PackageId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.PackageId, new SelectList(Model.Packages, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboPackage" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.PackageId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PackageSize, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.PackageSize, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtPackageSize" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.PackageSize)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Leads, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.Leads, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtLeads" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.Leads)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Speed, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.Speed, htmlAttributes: new { @class = "form-control  bg-yellow", @id = "txtSpeed" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.Speed)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.EABI_EBR_Revision, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.EABI_EBR_Revision, htmlAttributes: new { @class = "form-control bg-brown", @id = "txtEABI_EBR_Revision" }, disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>(Example) 01, 02, 03….</strong>"></span>
                        @Html.ValidationMessageFor(model => model.EABI_EBR_Revision)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.WaferSizeId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.WaferSizeId, new SelectList(Model.WaferSizes, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboWaferSize" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.WaferSizeId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentWaferThichness, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.CurrentWaferThichness, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtCurrentWaferThichness" }, @disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>(Example) 28 mils, 11 mils, 6 mils, etc...</strong>"></span>
                        @Html.ValidationMessageFor(model => model.CurrentWaferThichness)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.InternalDevice, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.InternalDevice, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtInternalDevice" }, disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>(Example) 35934-1, 35934-2, etc</strong>"></span>
                        @Html.ValidationMessageFor(model => model.InternalDevice)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FabCodeId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.FabCodeId, new SelectList(Model.FabCodes, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboFabCode" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.FabCodeId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Power_Voltage, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.Power_Voltage, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtPowerVoltage" }, disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>Optional</strong>"></span>
                        @Html.ValidationMessageFor(model => model.Power_Voltage)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DieBlankId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.DieBlankId, new SelectList(Model.DieBlanks, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboDieBlank" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.DieBlankId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AssemblyLocationId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.AssemblyLocationId, new SelectList(Model.AssemblyLocations, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-brown", @id = "cboAssemblyLocation" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.AssemblyLocationId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FGLocationId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.FGLocationId, new SelectList(Model.FGLocations, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboFGLocation" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.FGLocationId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AssemblyFlow, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.AssemblyFlow, htmlAttributes: new { @class = "form-control bg-yellow", @id = "txtAssemblyFlow" }, disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>Optional</strong>"></span>
                        @Html.ValidationMessageFor(model => model.AssemblyFlow)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PackageTypeId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.PackageTypeId, new SelectList(Model.PackageTypes, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboPackageType" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.PackageTypeId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TopSideMarkingId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.TopSideMarkingId, new SelectList(Model.MarkingInstructions, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-brown", @id = "cboTopSideMarking" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.TopSideMarkingId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.MRL, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.MRL, htmlAttributes: new { @class = "form-control bg-brown", @id = "txtMRL" }, disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>SJO Only</strong>"></span>
                        @Html.ValidationMessageFor(model => model.MRL)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NameOfMarkingFile, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.NameOfMarkingFile, htmlAttributes: new { @class = "form-control bg-brown", @id = "txtNameOfMarkingFile" }, disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>If a file is provided, just note the file name here.</strong>"></span>
                        @Html.ValidationMessageFor(model => model.NameOfMarkingFile)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RequiresSpecialMark, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.RequiresSpecialMark, dropdownYESNO, htmlAttributes: new { @class = "form-control bg-brown", @id = "cboRequiresSpecialMark" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.RequiresSpecialMark)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RequiresAssEngrInput, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.RequiresAssEngrInput, dropdownYESNO, htmlAttributes: new { @class = "form-control bg-brown", @id = "cboRequiresAssEngrInput" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.RequiresAssEngrInput)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.MarkingCodeId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRDropDownListFor(model => model.MarkingCodeId, new SelectList(Model.MarkingCodes, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-brown", @id = "cboMarkingCode" }, @disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>(Example) A2S1, etc... from MA-5005</strong>"></span>
                        @Html.ValidationMessageFor(model => model.MarkingCodeId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Pin1Marking, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.Pin1Marking, htmlAttributes: new { @class = "form-control bg-brown", @id = "txtPin1Marking" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.Pin1Marking)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TopLine, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.TopLine, htmlAttributes: new { @class = "form-control bg-brown", @id = "txtTopLine" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.TopLine)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TwoLine, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.TwoLine, htmlAttributes: new { @class = "form-control bg-brown", @id = "txtTwoLine" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.TwoLine)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ThreeLine, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.ThreeLine, htmlAttributes: new { @class = "form-control bg-brown", @id = "txtThreeLine" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.ThreeLine)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FourLine, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.FourLine, htmlAttributes: new { @class = "form-control bg-brown", @id = "txtFourLine" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.FourLine)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FiveLine, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.FiveLine, htmlAttributes: new { @class = "form-control bg-brown", @id = "txtFiveLine" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.FiveLine)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SixLine, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.SixLine, htmlAttributes: new { @class = "form-control bg-brown", @id = "txtSixLine" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.SixLine)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ShipFinishedProductToId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.ShipFinishedProductToId, new SelectList(Model.ShipFinishedProductTos, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboShipFinishedProductTo" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.ShipFinishedProductToId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AttentionFinished, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.AttentionFinished, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtAttentionFinished" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.AttentionFinished)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ShipRejectedPartToId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.ShipRejectedPartToId, new SelectList(Model.ShipRejectedPartTos, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboShipRejectedPartTo" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.ShipRejectedPartToId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AttentionRejected, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.AttentionRejected, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtAttentionRejected" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.AttentionRejected)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ReturnWaferToId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.ReturnWaferToId, new SelectList(Model.ReturnWaferTos, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboReturnWaferTo" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.ReturnWaferToId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.VendorContactId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.VendorContactId, new SelectList(Model.VendorContacts, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-purple", @id = "cboVendorContact" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.VendorContactId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.VendorCodeId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.VendorCodeId, new SelectList(Model.VendorContacts, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-yellow", @id = "cboVendorCode" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.VendorCodeId)
                    </div>
                </div>

            </div>
        </div>

        <div class="col-sm-6">
            <div class="form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurposeOfBuildId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.PurposeOfBuildId, new SelectList(Model.PurposeOfBuilds, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboPurposeOfBuild" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.PurposeOfBuildId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LotOwnerId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.LotOwnerId, new SelectList(Model.LotOwners, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboLotOwner" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.LotOwnerId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RequestCycleTimeId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.RequestCycleTimeId, new SelectList(Model.RequestCycleTimes, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboRequestCycleTime" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.RequestCycleTimeId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PKGProcessId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.PKGProcessId, new SelectList(Model.PKGProcess, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboPKGProcess" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.PKGProcessId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.QualityLevelId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.QualityLevelId, new SelectList(Model.QualityLevels, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboQualityLevel" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.QualityLevelId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RevenueLocationId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.RevenueLocationId, new SelectList(Model.RevenueLocations, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboRevenueLocation" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.RevenueLocationId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BondDiagramAttached, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRCheckBoxFor(model => model.BondDiagramAttached, htmlAttributes: new { @class = "checkbox", @id = "chkBondDiagramAttached" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.BondDiagramAttached)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ScrapExcessDie_Wafer, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRDropDownListFor(model => model.ScrapExcessDie_Wafer, dropdownYESNOComment, htmlAttributes: new { @class = "form-control bg-blue", @id = "cboScrapExcessDie_Wafer" }, @disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>This field refers to excess die or the wafer skeleton die… not residual parts</strong>"></span>
                        @Html.ValidationMessageFor(model => model.ScrapExcessDie_Wafer)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.UV_Erase, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRCheckBoxFor(model => model.UV_Erase, htmlAttributes: new { @class = "checkbox", @id = "chkUV_Erase" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.UV_Erase)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DieCoat, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRCheckBoxFor(model => model.DieCoat, htmlAttributes: new { @class = "checkbox", @id = "chkDieCoat" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.DieCoat)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.WireMaterialId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.WireMaterialId, new SelectList(Model.WireMaterias, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboWireMaterial" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.WireMaterialId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProcessLTSID, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.ProcessLTSID, new SelectList(Model.ProcessLTSs, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboProcessLTS" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.ProcessLTSID)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ForecastMaterial, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.ForecastMaterial, dropdownYESNO, htmlAttributes: new { @class = "form-control bg-blue", @id = "cboForecastMaterial" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.ForecastMaterial)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BondDiagram, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.BondDiagram, htmlAttributes: new { @class = "form-control bg-yellow", @id = "txtBondDiagram" }, disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>Bond Diagram File Name as a Reference<br />This is a required field for SJO Engineering Builds</strong>"></span>
                        @Html.ValidationMessageFor(model => model.BondDiagram)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BondDiagramRev, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.BondDiagramRev, htmlAttributes: new { @class = "form-control bg-yellow", @id = "txtBondDiagramRev" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.BondDiagramRev)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NPILot, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRCheckBoxFor(model => model.NPILot, htmlAttributes: new { @class = "checkbox", @id = "chkNPILot" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.NPILot)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.IsCompleted, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRCheckBoxFor(model => model.IsCompleted, htmlAttributes: new { @class = "checkbox", @id = "chkIsCompleted" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.IsCompleted)
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-4 col-md-8">
                        <ul class="list-group">
                            <li class="list-group-item text-center">@Html.LabelFor(model => model.EngineerTeam, htmlAttributes: new { @class = "control-label" })</li>
                            <li class="list-group-item text-color-red text-center">
                                ALL PACKAGE QUALIFICATION LOTS MUST BE ROUTED
                                THROUGH PENANG QA & ASSEMBLY ENGINEERING TEAM
                            </li>
                            <li class="list-group-item">
                                @Html.EBRTextAreaFor(model => model.EngineerTeam, htmlAttributes: new { @class = "form-control bg-yellow", @rows = 18, @id = "txtEngineerTeam" }, disabled: statusType)
                                @Html.ValidationMessageFor(model => model.EngineerTeam)
                            </li>
                            <li class="list-group-item" style="font-size:10px;">Pack and label per ATMEL Procedure MP-5003.</li>
                        </ul>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TestLocationId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.TestLocationId, new SelectList(Model.TestLocations, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboTestLocation" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.TestLocationId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProbeStatusId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.ProbeStatusId, new SelectList(Model.ProbeStatus, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboProbeStatus" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.ProbeStatusId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PackageTestTypeId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRDropDownListFor(model => model.PackageTestTypeId, new SelectList(Model.PackageTestTypes, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboPackageTestType" }, @disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>Optional</strong>"></span>
                        @Html.ValidationMessageFor(model => model.PackageTestTypeId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TestProgram, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 has-feedback">
                        @Html.EBRTextBoxFor(model => model.TestProgram, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtTestProgram" }, disabled: statusType)
                        <span class="triangle-topright form-control-feedback" aria-hidden="false" data-toggle="popover" data-placement="top" data-html="true" data-trigger="hover"
                              data-content="<strong>If program name is too long to view, please enter in Test/Special Instructions Area.</strong>"></span>
                        @Html.ValidationMessageFor(model => model.TestProgram)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TestProgamAvailable, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.TestProgamAvailable, dropdownYESNO, htmlAttributes: new { @class = "form-control bg-blue", @id = "cboTestProgamAvailable" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.TestProgamAvailable)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CommentAvailable, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.CommentAvailable, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtCommentAvailable" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.CommentAvailable)
                    </div>
                </div>

                <div class="form-group">
                    @*@Html.LabelFor(model => model.Test Special Instruction, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EBRTextAreaFor(model => model.Test_Special_Instruction, htmlAttributes: new { @class = "form-control bg-blue", @rows = 19, @id = "txtTest_Special_Instruction" }, disabled: statusType)
                            @Html.ValidationMessageFor(model => model.Test_Special_Instruction)
                        </div>*@
                    <div class="col-md-offset-4 col-md-8">
                        <ul class="list-group">
                            <li class="list-group-item text-center">@Html.LabelFor(model => model.Test_Special_Instruction, htmlAttributes: new { @class = "control-label" })</li>
                            <li class="list-group-item">
                                @Html.EBRTextAreaFor(model => model.Test_Special_Instruction, htmlAttributes: new { @class = "form-control bg-blue", @rows = 15, @id = "txtTest_Special_Instruction" }, disabled: statusType)
                                @Html.ValidationMessageFor(model => model.Test_Special_Instruction)
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <br />

    <div style="border:2px dotted #c99"></div>
    <div class="row">
        <div class="col-xs-12">
            <div class="pull-left">
                @if (!statusType)
                {
                    <input class="btn btn-link" type="button" id="btnAddSub" value="Add" />
                }
            </div>
        </div>
    </div>
    <div id="tblListSub">
        @{Html.RenderAction("ListEditSub", "SubDashboard", new { id = Model.Id });}
    </div>

    <div style="border:2px dotted #c99"></div>
    <br />

    <div class="row">
        <div class="col-sm-6">
            <div class="form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.RequestedBy, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.RequestedBy, htmlAttributes: new { @class = "form-control bg-brown", @id = "txtRequestedBy" }, disabled: statusType)
                        @Html.HiddenFor(model => model.RequestedBy)
                        @*@Html.ValidationMessageFor(model => model.RequestedBy)*@
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.EmailAddressId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.EmailAddressId, new SelectList(Model.EmailAddress, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboEmailAddress" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.EmailAddressId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.Phone, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtPhone" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.EmailAddressId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RequesterLocationId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.RequesterLocationId, new SelectList(Model.RequesterLocations, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-brown", @id = "cboRequesterLocation" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.RequesterLocationId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BusinessUnit, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.BusinessUnit, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtBusinessUnit" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.BusinessUnit)
                    </div>
                </div>

            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.ApprovingManager, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.ApprovingManager, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtApprovingManager" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.ApprovingManager)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ManagerEmailId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.ManagerEmailId, new SelectList(Model.ManagerEmails, "Id", "Name"), "---Select---", htmlAttributes: new { @class = "form-control bg-blue", @id = "cboManagerEmail" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.ManagerEmailId)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TotalCost, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRTextBoxFor(model => model.TotalCost, htmlAttributes: new { @class = "form-control bg-blue", @id = "txtTotalCost" }, disabled: statusType)
                        @Html.ValidationMessageFor(model => model.TotalCost)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RequestedShipDate, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        <table>
                            <tbody>
                                <tr>
                                    <td width="100%">
                                        @Html.EBRTextBoxFor(model => model.RequestedShipDate, htmlAttributes: new { @class = "form-control bg-purple", @id = "txtRequestedShipDate", @Value = @Model.RequestedShipDate.HasValue ? @Model.RequestedShipDate.Value.ToString("MM/dd/yyyy") : "" }, disabled: statusType)
                                    </td>
                                    <td><img src="~/Content/images/calendar.png" class="img-calendar" id="imgCalendar" /></td>
                                </tr>
                            </tbody>
                        </table>
                        @Html.ValidationMessageFor(model => model.RequestedShipDate)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RequiresTestPgmApproval, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EBRDropDownListFor(model => model.RequiresTestPgmApproval, dropdownYESNO, htmlAttributes: new { @class = "form-control bg-blue", @id = "cboRequiresTestPgmApproval" }, @disabled: statusType)
                        @Html.ValidationMessageFor(model => model.RequiresTestPgmApproval)
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="jumbotron">
        <div class="form-horizontal">
            <div class="form-group">
                <label class="control-label  col-md-2">Attachments</label>
                <div class="col-md-10">
                    @if (!statusType)
                    {
                        <input id="multipleFileUpload" name="multipleFileUpload" type="file" class="form-control btn btn-info pull-left" multiple style="max-width:300px;margin-right:5px;" />
                        <button class="btn btn-primary btn-width-md cancel" type="button" id="btnUpload" value="Upload">Upload</button>
                    }
                    else
                    {
                        <input id="multipleFileUpload" name="multipleFileUpload" type="file" class="form-control btn btn-info pull-left" multiple style="max-width:300px;margin-right:5px;" disabled="disabled" />
                        <button class="btn btn-primary btn-width-md cancel" type="button" id="btnUpload" value="Upload" disabled="disabled">Upload</button>
                    }
                    <br />
                    <div id="divShowAllFiles">
                        @{Html.RenderAction("ShowAllFiles", routeValues: new { id = Model.Id });}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 col-xs-12">
            <div class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-offset-4 col-xs-12">
                        @if (Model.IsAllowEdit)
                        {
                            @Html.EBRButton("Draft", attributes: new { @class = "btn btn-primary btn-width-md cancel", @id = "btnSaveDraft", @name = "saveType", @type = "submit" }, disabled: false)
                            @Html.EBRButton("Submit", attributes: new { @class = "btn btn-primary btn-width-md", @id = "btnSaveSubmit", @name = "saveType", @type = "submit" }, disabled: false)
                        }
                        @if (Model.StatusType == EBROnline.Model.Types.StatusType.SUBMITTED && User.IsInRole("Planner"))
                        {
                            @Html.EBRButton("Reject", attributes: new { @class = "btn btn-primary btn-width-md cancel", @id = "btnSaveReject", @name = "saveType", @type = "submit" }, @disabled: false)
                            @Html.EBRButton("Accept", attributes: new { @class = "btn btn-primary btn-width-md cancel", @id = "btnSaveAccept", @name = "saveType", @type = "submit" }, @disabled: false)
                        }

                        @if (Model.StatusType == EBROnline.Model.Types.StatusType.ACCEPTED && User.IsInRole("Planner"))
                        {
                            @Html.EBRButton("Complete", attributes: new { @class = "btn btn-primary btn-width-md cancel", @id = "btnSaveComplete", @name = "saveType", @type = "submit" }, @disabled: false)
                        }
                        @if (User.Identity.Name == Model.RequestedBy || User.IsInRole("Planner") || User.IsInRole("Admin"))
                        {
                            @Html.EBRButton("Cancel", attributes: new { @class = "btn btn-default btn-width-md cancel", @id = "btnSaveCancel", @name = "saveType", @type = "submit" }, @disabled: false)
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@{
    Html.RenderPartial("_PartialPageNotice");
    Html.RenderPartial("_PartialPageEditSub", new EBROnline.ViewModel.ListSubViewModel() { DashboardId = Model.Id });
    Html.RenderPartial("_PartialPageLoading");
}

@section Scripts{
    <script type="text/javascript">
        //window.onbeforeunload = confirmExit;
        //function confirmExit(e) {
        //    if (hasData() && !clickSave)
        //        return "You have attempted to leave this page.  If you have made any changes to the fields without clicking the Save button, your changes will be lost. Are you sure you want to exit this page?";
        //}
        var options = {
            show: true,
            backdrop: false,
        };

        $(document).ready(function () {
            $('#txtDevice').focus();

            $('span[data-toggle="popover"]').popover();

            $('#btnAddSub').on('click', function () {
                $('#modalSubInsert').modal(options);
            });

            $('#btnSaveSubmit').on('click', function (event) {
                var accept = confirm('After submitted this form, you cannot edit it anymore. Are you sure to submit?');
                if (!accept) event.preventDefault();
            });

            $('#tblListSub').on('click', '.btn-edit', function (event) {
                event.preventDefault();
                var url = $(this).attr('data-url');

                $('#modalSubEditBody').load(url);
                $('#modalSubEdit').modal(options);
            });

            $('#tblListSub').on('click', '.btn-delete', function (event) {
                event.preventDefault();
                var url = $(this).attr('data-url');
                $.ajax({
                    type: 'POST',
                    url: url,
                    success: function (e, data) {
                        refreshListSub();
                    },
                });
            });

            $('#multipleFileUpload').on('change', function (e) {
                $(this).next().removeAttr('disabled');
            }).next().attr('disabled', 'disabled');

            onRegisterCalendar();

            onRegisterUploadFile();
            onRegisterMultiUpload();
        });

        onRegisterCalendar = function () {
            $('#txtRequestedShipDate').datepicker({ autoSize: true, dateFormat: 'mm/dd/yy' });
            //show calendar when click image Calendar
            $('#imgCalendar').on('click', function () {
                $('#txtRequestedShipDate').datepicker('show');
            });
        }
        /*BEGIN NEW REQUEST*/
        onBegin = function () {
            showLoading();
        }

        onSuccess = function (data) {
            if (data.code == "ST01") {
                $('#btnSuccessOK').attr('href', '@Url.Action("Index","Home")');
            }
            $('#modalSaveSuccess').modal(options);
        }
        onFailure = function (data) {
            $('#modalSaveFailure').modal('show');
        }
        onComplete = function () {
            hideLoading();
        }

        /*END NEW REQUEST*/

        /*BEGIN MODAL POPUP SHOW AND HIDEN*/
        var lotNumber = '';
        var batchLotNumber = '';
        var waferQty = '';
        var build = '';
        var comment = '';

        function changeValueInPopup() {
            var inputs = $('#modalSubEdit').find('input[type="text"], input[type="number"]');
            for (var i = 0; i < inputs.length; i++) {
                var $this = $(inputs[i]);
                $this.on('input propertychange paste', function () {
                    lotNumber = $('#modalSubEditBody #txtAddLotNumber').val();
                    batchLotNumber = $('#modalSubEditBody #txtAddBatchLotNumber').val();
                    waferQty = $('#modalSubEditBody #txtAddWaferQty').val();
                    build = $('#modalSubEditBody #txtAddBuildQuality').val();
                    comment = $('#modalSubEditBody #txtAddComment').val();
                    if ($.trim(lotNumber) == '' || $.trim(batchLotNumber) == '' ||
                        $.trim(waferQty) == '' || $.trim(build) == '') {
                        $('#modalSubEditBody #btnSaveSub').attr('disabled', true);
                    }
                    else {
                        $('#modalSubEditBody #btnSaveSub').attr('disabled', false);
                    }
                });
            }
        }

        $('#modalSubInsert').on('shown.bs.modal', function () {
            $('#modalSubInsert #txtAddStackDieId').focus();
            changeValueInPopup();
        })

        $('#modalSubInsert').on('hidden.bs.modal', function () {
            $(this).find('input[type="text"], input[type="number"]').val('');
        })

        $('#modalSubEdit').on('shown.bs.modal', function () {
            $('#modalSubEdit #txtAddStackDieId').focus();
            changeValueInPopup();
        })

        $('#modalSubEdit').on('hidden.bs.modal', function () {
            $(this).find('input[type="text"], input[type="number"]').val('');
        })
        /*END MODAL POPUP SHOW AND HIDEN*/

        /*BEGIN EDIT SUB MASTER*/
        onEditSubBegin = function () {
            $('#modalSubEdit').modal('hide');
            showLoading();
        }
        onEditSubComplete = function () { hideLoading(); }
        onEditSubSuccess = function () {
            refreshListSub();
        }
        onEditSubFailure = function () { }
        /*END EDIT SUB MASTER*/

        /*BEGIN INSERT SUB */
        onInsertSubBegin = function () {
            showLoading();
            $('#modalSubInsert').modal('hide');
        }
        onInsertSubComplete = function () {
            hideLoading();
        }
        onInsertSubSuccess = function () {
            refreshListSub();
        }
        onInsertSubFailure = function () { }
        /*END INSERT SUB*/

        /*FUNCTION */

        function hideLoading() {
            $('#screen').css({ opacity: 0.2, 'width': 0, 'height': 0 });
            $('body').css({ 'overflow': 'show' });
            $('#box').css({ 'display': 'none' });
            $('html').css('overflow', '-moz-scrollbars-vertical');
            $('html').css('overflow-y', 'scroll');
        }

        function showLoading() {
            $('#screen').css({ opacity: 0.2, 'width': $(document).width(), 'height': $(document).height() });
            $(window).scrollTop(0);
            $('body').css({ 'overflow': 'hidden' });
            $('#box').css({ 'display': 'block' });
        }

        function refreshListSub() {
            $('#tblListSub').load('@Url.Action("ListEditSub", "SubDashboard", new { id=Model.Id})');
        }
        /*END FUNCTION*/


        /*BEGIN UPLOAD AND DOWNLOAD FILE*/
        var fileCollection = new Array();

        onRegisterMultiUpload = function () {
            $('#multipleFileUpload').on('change', function (e) {
                var files = e.target.files;
                $.each(files, function (i, file) {
                    fileCollection.push(file);
                });
            });
        }

        onRegisterUploadFile = function () {

            $('#btnUpload').on('click', function (e) {
                e.preventDefault();
                showLoading();

                if (fileCollection.length > 0) {
                    var formData = new FormData($('#form0'));
                    $.each(fileCollection, function (i, file) {
                        formData.append("files", file);
                    });
                    var url = '@Url.Action("UploadMultipleFiles", "Dashboard", routeValues: new { id=Model.Id})';
                    $.ajax({
                        url: url,
                        type: 'POST',
                        xhr: function () {
                            var myXhr = $.ajaxSettings.xhr();
                            return myXhr;
                        },
                        success: function (data) {
                            getAllFiles();
                        },
                        complete: function () {
                            hideLoading();
                        },
                        data: formData,
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }
            });

        }

        getAllFiles = function () {
            var urlShowAll = '@Url.Action("ShowAllFiles", "Dashboard", routeValues: new { id = Model.Id})';
            $.ajax({
                type: 'GET',
                url: urlShowAll,
                contentType: false,
                processData: false,
                success: function (data) {
                    $('#divShowAllFiles').html(data);
                },
            });
        }
        /*END UPLOAD AND DOWNLOAD FILE*/

    </script>
}
